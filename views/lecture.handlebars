<html>
<head>
	<title>Lecture Page</title>
	<meta charset="utf-8">
	<link rel="preconnect" href="https://fonts.gstatic.com">
	<link href="https://fonts.googleapis.com/css2?family=Nunito&display=swap" rel="stylesheet">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="/css/project.css" rel="stylesheet">

	<!-- idk i'm just pasting this here-
	<link href="/css/bootstrap.min.css" rel="stylesheet">
	<link href="/css/bootstrap-theme.min.css" rel="stylesheet">
	-->

  	<script src="https://code.jquery.com/jquery.js"></script>
	<script src="/js/bootstrap.min.js"></script>
	<script src="/js/project.js"></script>

	<!-- where we would put google analytics -->

</head>

<body>
	<div class="example">
		<h2 style="text-align: left;">CSE 105: Theory Of Computation</h2>
		<!--video embed -->
		<iframe width="75%" height="50%" src="https://www.youtube.com/embed/gJQTFhkhwPA" 
		frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
		
		<div class="buttons" style="margin-top: 10px;">
			<button>Comment</button> <button>Question</button>
		</div>

		<div class="titles">
			<h3 style="line-height: 20px;">Wk 5 Thurs: Turing Machines</h3>
			<p style="margin-bottom: 20px;">On today's lecture, we will be introducting Turing Machines and their functionality.</p>
			<hr>
			<h3>Transcript</h3>
			<hr>
			<div class="container" style="height: 300px;">
				<div class="container" style="line-height: 20px;">A major concern of early computer engineers such as Alan Turing was whether certain mathematical tasks were computable. To answer this question Turing created the Turing machine. What else would you call it?
This hypothetical machine uses an infinitely long strip of tape composed of a series of cells with symbols written on them to store the inputs and outputs of computations. It also has a head that moved to the left or right that can read symbols from the cells, write symbols to the cells, and make decisions about what to do based on the contents of the cell and its current state. The state machine is essentially the program that tells the machine what tasks to perform. Every turing machine must have a start or initial state. Based on the machine state and the contents of the current cell of the strip, the machine will determine its next state as indicated by the arrow called a state transition. The machine will also change the value in the current cell and may move the head to the left or right or keep it in the same place.
So in the initial state we see that the current cell has value one. Our state diagram tells us that we will transition to state q1, change the value of the current cell to a zero, and then move the head to the left one cell. Now we are in state q1, and our current cell has value 0. Our state diagram tells us to transition to state q2, change the current cell to 1, and keep the head in the same place. Now we're in state q2, and our current cell has value 1. Our state diagram tells us to transition back to our initial state change the current cell value to 1, which it already is, and move the head to the right. Finally since our state is the initial state, and our current cells value is 0, we transition to the halting state. Change the value in the cell to 0 and keep the head in the same place.
The halt state is another critical state that every turing machine needs. Without the halting state the machine will keep looping forever and never complete its programmed task. Let's take a step back and look at the Turing machine at a more abstract level. Suppose you have a tape with two values a and B stored on it. We could build a Turing machine that would perform the addition operation on A and B and store the summation back onto the tape. We would simply need to create a state machine that will control the touring machine appropriately. We could represent this type of system with the black box notation which we show our inputs entering a black box and our output leaving it. We could then theoretically represent a machine to perform any legal computation such as multiplication. More generally we say that each Toring machine has inputs outputs and a program P that describes its behavior. The problem with these types of Turing machines is that we need to create a new Turing machine for every operation we want to perform. As you will learn later,  creating hardware is much more expensive than writing software. So creating a new Turing machine for every operation is intolerable.
So Turing invented the universal Turing machine. This machine had a basic state machine that could be programmed by a machine description P so that to the external user, the universal Turing machine would behave exactly like a regular Turing machine that's programmed to do P. Perhaps more importantly, we could feed in a series of machine descriptions to the universal Turing machine to perform a series of operations on the data stored on a strip. For example, we could tell the universal Turing machine to first perform an addition on B and C and then multiply that summation with A.
As you will learn later, the ability to write small components or functions and join them together will make your life so much easier as a programmer or hardware designer.</p>
			</div>
		</div>


	</div>

</body>
</html>
